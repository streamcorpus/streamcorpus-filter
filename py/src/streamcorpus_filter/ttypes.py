#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FilterNames:
  """
  Attributes:
   - target_id_to_names: map of target_id to list of name strings.  This reflects how the
  data is usually gathered: starting from a target_id, one scrapes
  the profile page for alternate names.
   - name_to_target_ids: map of name strings to list of target_id strings that share that
  name.  This is the inverse mapping of target_id_to_names and
  reflects how the matcher must organize the data.  When a document
  matches a name with multiple target_ids, the matcher must create
  multiple streamcorpus.Rating objects for that one name string,
  i.e. one for each target_id.  This is redundant with the above.
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'target_id_to_names', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 1
    (2, TType.MAP, 'name_to_target_ids', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 2
  )

  def __init__(self, target_id_to_names=None, name_to_target_ids=None,):
    self.target_id_to_names = target_id_to_names
    self.name_to_target_ids = name_to_target_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.target_id_to_names = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = []
            (_etype10, _size7) = iprot.readListBegin()
            for _i11 in xrange(_size7):
              _elem12 = iprot.readString();
              _val6.append(_elem12)
            iprot.readListEnd()
            self.target_id_to_names[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.name_to_target_ids = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin() 
          for _i17 in xrange(_size13):
            _key18 = iprot.readString();
            _val19 = []
            (_etype23, _size20) = iprot.readListBegin()
            for _i24 in xrange(_size20):
              _elem25 = iprot.readString();
              _val19.append(_elem25)
            iprot.readListEnd()
            self.name_to_target_ids[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterNames')
    if self.target_id_to_names is not None:
      oprot.writeFieldBegin('target_id_to_names', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.target_id_to_names))
      for kiter26,viter27 in self.target_id_to_names.items():
        oprot.writeString(kiter26)
        oprot.writeListBegin(TType.STRING, len(viter27))
        for iter28 in viter27:
          oprot.writeString(iter28)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.name_to_target_ids is not None:
      oprot.writeFieldBegin('name_to_target_ids', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.name_to_target_ids))
      for kiter29,viter30 in self.name_to_target_ids.items():
        oprot.writeString(kiter29)
        oprot.writeListBegin(TType.STRING, len(viter30))
        for iter31 in viter30:
          oprot.writeString(iter31)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
